# Generated by Django 5.2.7 on 2025-10-15 10:42

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        ("wagtailcore", "0095_groupsitepermission"),
        ("wagtailimages", "0027_image_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="PortfolioCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        help_text="A slug to identify posts by this category",
                        max_length=255,
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Portfolio Category",
                "verbose_name_plural": "Portfolio Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PortfolioPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("client", models.CharField(blank=True, max_length=255)),
                (
                    "project_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Project date"
                    ),
                ),
                ("project_website", models.URLField(blank=True)),
                ("lead_paragraph", wagtail.fields.RichTextField(blank=True)),
                (
                    "body",
                    wagtail.fields.StreamField(
                        [
                            ("heading_block", 2),
                            ("paragraph_block", 3),
                            ("image_block", 6),
                            ("accordion", 9),
                            ("feature_list", 13),
                        ],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {"form_classname": "title", "required": True},
                            ),
                            1: (
                                "wagtail.blocks.ChoiceBlock",
                                [],
                                {
                                    "blank": True,
                                    "choices": [
                                        ("", "Select a header size"),
                                        ("h2", "H2"),
                                        ("h3", "H3"),
                                        ("h4", "H4"),
                                    ],
                                    "required": False,
                                },
                            ),
                            2: (
                                "wagtail.blocks.StructBlock",
                                [[("heading_text", 0), ("size", 1)]],
                                {},
                            ),
                            3: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {
                                    "description": "A rich text paragraph",
                                    "icon": "pilcrow",
                                    "template": "blocks/paragraph_block.html",
                                },
                            ),
                            4: (
                                "wagtail.images.blocks.ImageChooserBlock",
                                (),
                                {"required": True},
                            ),
                            5: ("wagtail.blocks.CharBlock", (), {"required": False}),
                            6: (
                                "wagtail.blocks.StructBlock",
                                [[("image", 4), ("caption", 5)]],
                                {},
                            ),
                            7: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Add the title for the accordion item",
                                    "required": True,
                                },
                            ),
                            8: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {
                                    "help_text": "Add the content for the accordion item",
                                    "required": True,
                                },
                            ),
                            9: (
                                "wagtail.blocks.StructBlock",
                                [[("title", 7), ("content", 8)]],
                                {},
                            ),
                            10: (
                                "wagtail.blocks.CharBlock",
                                (),
                                {
                                    "help_text": "Add a title for the feature list (e.g., Key Features)",
                                    "required": True,
                                },
                            ),
                            11: ("wagtail.blocks.CharBlock", (), {"label": "Feature"}),
                            12: ("wagtail.blocks.ListBlock", (11,), {}),
                            13: (
                                "wagtail.blocks.StructBlock",
                                [[("title", 10), ("features", 12)]],
                                {},
                            ),
                        },
                        verbose_name="Page body",
                    ),
                ),
                (
                    "live_project_url",
                    models.URLField(
                        blank=True, help_text="The URL to the live project"
                    ),
                ),
                (
                    "categories",
                    modelcluster.fields.ParentalManyToManyField(
                        blank=True, to="portfolio.portfoliocategory"
                    ),
                ),
                (
                    "next_project_page",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the next project to display",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Portfolio Page",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="PortfolioPageGalleryImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "sort_order",
                    models.IntegerField(blank=True, editable=False, null=True),
                ),
                ("caption", models.CharField(blank=True, max_length=250)),
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="wagtailimages.image",
                    ),
                ),
                (
                    "page",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gallery_images",
                        to="portfolio.portfoliopage",
                    ),
                ),
            ],
            options={
                "ordering": ["sort_order"],
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PortfolioPageTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="portfolio.portfoliopage",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="portfoliopage",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="portfolio.PortfolioPageTag",
                to="taggit.Tag",
                verbose_name="Tech Stack",
            ),
        ),
    ]
